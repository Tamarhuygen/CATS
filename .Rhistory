install.packages("ggplot2")
source('~/blast_project-master/scripts/compare_methods.R')
source('~/blast_project-master/scripts/compare_methods.R')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("stringi")
library(ggplot2)
df = data.frame(Method = c(rep('BLAST', 12), rep('PSI-BLAST', 12)),
Database = c(rep('GO', 4), rep('SCOP', 4), rep('Pfam', 4)),
AUC = c(0.676, 0.740, 0.778, 0.689,
0.860, 0.859, 0.889, 0.860,
0.929, 0.932, 0.949, 0.928,
0.679, 0.750, 0.791, 0.685,
0.740, 0.889, 0.780, 0.850,
0.931, 0.932, 0.95, 0.93))
ggplot(df, aes(factor(Database, levels = c('GO', 'SCOP', 'Pfam')), AUC)) +
geom_boxplot(aes(fill = Method)) +
ylim(0.6, 1) +
xlab('Database') +
ylab('AUC') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(text = element_text(size = 25))
ggsave('./compare_methods.png', width=10, height=6)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
install.packages("ROCR")
sieveOfEratosthenes <- function(num){
values <- rep(TRUE, num)
values[1] <- FALSE
prev.prime <- 2
for(i in prev.prime:sqrt(num)){
values[seq.int(2 * prev.prime, num, prev.prime)] <- FALSE
prev.prime <- prev.prime + min(which(values[(prev.prime + 1) : num]))
}
return(which(values))
}
primes <- sieveOfEratosthenes(10^2)
10^2 / log(10^2)
numbers <0 c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
numbers <0- c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
numbers <- c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
lapply(numbers, function(x) x/log(x))
plot <- lapply(numbers, function(x) x/log(x))
primes <- length(sieveOfEratosthenes(numbers))
primes <- length(lapply(numbers, function(x) sieveOfEratosthenes(x)))
numbers <- c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
numbers <- lapply(numbers, function(x) x/log(x))
plot(primes, numbers)
numbers
plot(numbers)
plot(primes, as.numeric(numbers))
plot(primes, unlist(numbers))
unlist(numbers)
primes
primes <- lapply(numbers, function(x) length(sieveOfEratosthenes(x)))
plot(primes, unlist(numbers))
primes / numbers
unlist(numbers) / primes
plot(primes, numbers)
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
bline(lm(performance$Final ~ attendance))
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
dev.off()
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
performance <- read.table("School/intro_/course_performance.tab", head=T, fill=T)
#Calculate attendance per student
attendance <- apply(performance[2:11], 1, sum)
#Graphically show a possible relation in student attendance and final grade using plot and abline(lm).
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
dev.off()
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
png("School/intro_/attendance_vs_grade.png")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
dev.off()
cor.test(performance$Final, attendance, method="pearson", use="na.or.complete")
cor.test(performance$Final, attendance, method="kendall", use="na.or.complete")
cor.test(performance$Final, attendance, method="spearman", use="na.or.complete")
lapply(animal_sleep, class)
lapply(animal_sleep, class)
animal_sleep <- read.table("School/intro_/animal_sleep.dat", fill=T, sep="\t")
#Missing values are -999.0 so for statisticals test this is changed to NA in dataframe
animal_sleep[animal_sleep == -999.0] <- NA
#Naming the columns according to the comments (hard to directly load) in the animal_sleep.dat file. First vector made (could be done directly)
col_n <- c("species", "body_weight_kg", "brain_weight_g", "slow_wave_sleep",
"paradoxical_sleep", "total_sleep", "max_lifespan_years",
"gestation_time_days", "predation_index", "sleep_exposure_index",
"overall_danger_index" )
colnames(animal_sleep) <- col_n
#2b
#Check column classes
lapply(animal_sleep, class)
dev.off()
png("School/intro_/log.png")
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
dev.off()
cor(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg), use= "na.or.complete")
View(animal_sleep)
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
library("caret")
install.packages("caret")
library("caret")
instal.packages("ggplot2")
install.packages("ggplot2")
library("caret")
update.packages(checkBuilt = T)
library("caret")
install.packages("caret")
install.packages("caret", dependencies = T)
library("caret")
?caret
library("caret")
install.packages("caret", dependencies = T)
library("caret")
library("ggplot2")
install.packages("Rcpp")
library(ggplot2)
library(caret)
setwd("/Users/Harme/Dropbox/b4tm/CATS/")
train.call = read.delim("train_call.txt")
train.clinical = read.delim("train_clinical.txt")
validation.call = read.delim("validation_call.txt")
merged = merge(train.clinical, t(train.call[,-1:-4]), by.x="Sample", by.y="row.names")
val = as.data.frame(t(validation.call[,-1:-4]))
her2_less <- merged[merged$Subgroup != 'HER2+',]
subgroups = factor(merged[merged$Subgroup != 'HER2+', 'Subgroup'])
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 3,
innerRepeats = 1,
trainMethod = "pam",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
library(ggplot2)
source('C:/Users/Harme/Dropbox/b4tm/CATS/region_finder.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 3,
innerRepeats = 1,
trainMethod = "pam",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
(1*0.32) +  (mean(c(results$MethodAccuracy$`1_knowledge`, results$MethodAccuracy$`2_knowledge`, results$MethodAccuracy$`3_knowledge`)) * 0.68)
(1*0.32) + (mean(c(results$MethodAccuracy$`1_rfe`, results$MethodAccuracy$`2_rfe`, results$MethodAccuracy$`3_rfe`)) * 0.68)
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 3,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 3,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 3,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 3,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
results$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
ls()
head(her2_less)
ls()
ncol(her2_less)
her2_less[,2]
her2_less[,1]
her2_less[,4]
her2_less[,3]
her2_less[,2]
View(her2_less[,3:2836])
her2_less["V2185"]
feature_sizes <- seq(10,100,10)
ctrl <- rfeControl(functions = rfFuncs, method = 'repeatedcv', repeats = 1, verbose = F)
profile <- rfe(her2_less[,3:2836], her2_less$Subgroup, sizes = feature_sizes, rfeControl = ctrl)
her2_less$Subgroup
her2_less$Subgroup
profile <- rfe(her2_less[,3:2836], her2_less$Subgroup, sizes = feature_sizes, rfeControl = ctrl)
profile <- rfe(her2_less[,3:2836], subgroups, sizes = feature_sizes, rfeControl = ctrl)
best_features <- predictors(profile)
best_features
length(best_features)
ctrl <- rfeControl(functions = rfFuncs, method = 'repeatedcv', repeats = 1, verbose = T)
feature_sizes <- seq(10,300,10)
ctrl <- rfeControl(functions = rfFuncs, method = 'repeatedcv', repeats = 1, verbose = T)
profile <- rfe(her2_less[,3:2836], subgroups, sizes = feature_sizes, rfeControl = ctrl)
best_features <- predictors(profile)
best_features
length(best_features)
best_features <- predictors(profile)
profile$bestSubset
?rfeControl
?rfe
profile$variables
profile$fit
profile$metric
?rfeControl
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
results <- CrossvalidationScheme( her2_less[,3:2836],
subgroups = subgroups,
n_outerFolds = 3,
innerFolds = 10,
innerRepeats = 1,
trainMethod = "rf",
filterMethods = c("rfe","knowledge"),
knowledgeFeatures = v_cols)
