install.packages("ggplot2")
source('~/blast_project-master/scripts/compare_methods.R')
source('~/blast_project-master/scripts/compare_methods.R')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
install.packages("stringi")
library(ggplot2)
df = data.frame(Method = c(rep('BLAST', 12), rep('PSI-BLAST', 12)),
Database = c(rep('GO', 4), rep('SCOP', 4), rep('Pfam', 4)),
AUC = c(0.676, 0.740, 0.778, 0.689,
0.860, 0.859, 0.889, 0.860,
0.929, 0.932, 0.949, 0.928,
0.679, 0.750, 0.791, 0.685,
0.740, 0.889, 0.780, 0.850,
0.931, 0.932, 0.95, 0.93))
ggplot(df, aes(factor(Database, levels = c('GO', 'SCOP', 'Pfam')), AUC)) +
geom_boxplot(aes(fill = Method)) +
ylim(0.6, 1) +
xlab('Database') +
ylab('AUC') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(text = element_text(size = 25))
ggsave('./compare_methods.png', width=10, height=6)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
install.packages("ROCR")
sieveOfEratosthenes <- function(num){
values <- rep(TRUE, num)
values[1] <- FALSE
prev.prime <- 2
for(i in prev.prime:sqrt(num)){
values[seq.int(2 * prev.prime, num, prev.prime)] <- FALSE
prev.prime <- prev.prime + min(which(values[(prev.prime + 1) : num]))
}
return(which(values))
}
primes <- sieveOfEratosthenes(10^2)
10^2 / log(10^2)
numbers <0 c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
numbers <0- c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
numbers <- c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
lapply(numbers, function(x) x/log(x))
plot <- lapply(numbers, function(x) x/log(x))
primes <- length(sieveOfEratosthenes(numbers))
primes <- length(lapply(numbers, function(x) sieveOfEratosthenes(x)))
numbers <- c(10^1, 10^2, 10^3, 10^4, 10^5, 10^6)
numbers <- lapply(numbers, function(x) x/log(x))
plot(primes, numbers)
numbers
plot(numbers)
plot(primes, as.numeric(numbers))
plot(primes, unlist(numbers))
unlist(numbers)
primes
primes <- lapply(numbers, function(x) length(sieveOfEratosthenes(x)))
plot(primes, unlist(numbers))
primes / numbers
unlist(numbers) / primes
plot(primes, numbers)
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
bline(lm(performance$Final ~ attendance))
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
dev.off()
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
performance <- read.table("School/intro_/course_performance.tab", head=T, fill=T)
#Calculate attendance per student
attendance <- apply(performance[2:11], 1, sum)
#Graphically show a possible relation in student attendance and final grade using plot and abline(lm).
pdf("School/intro_/attendance_vs_grade.pdf")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
dev.off()
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
png("School/intro_/attendance_vs_grade.png")
plot(attendance, performance$Final, ylab = "Final Grade", xlab="Attendance", main="Practical Attendance vs Final Grade Trend")
#Draw a trendline for the scatterplot
abline(lm(performance$Final ~ attendance))
dev.off()
cor.test(performance$Final, attendance, method="pearson", use="na.or.complete")
cor.test(performance$Final, attendance, method="kendall", use="na.or.complete")
cor.test(performance$Final, attendance, method="spearman", use="na.or.complete")
lapply(animal_sleep, class)
lapply(animal_sleep, class)
animal_sleep <- read.table("School/intro_/animal_sleep.dat", fill=T, sep="\t")
#Missing values are -999.0 so for statisticals test this is changed to NA in dataframe
animal_sleep[animal_sleep == -999.0] <- NA
#Naming the columns according to the comments (hard to directly load) in the animal_sleep.dat file. First vector made (could be done directly)
col_n <- c("species", "body_weight_kg", "brain_weight_g", "slow_wave_sleep",
"paradoxical_sleep", "total_sleep", "max_lifespan_years",
"gestation_time_days", "predation_index", "sleep_exposure_index",
"overall_danger_index" )
colnames(animal_sleep) <- col_n
#2b
#Check column classes
lapply(animal_sleep, class)
dev.off()
png("School/intro_/log.png")
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
dev.off()
cor(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg), use= "na.or.complete")
View(animal_sleep)
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
plot(log(animal_sleep$max_lifespan_years), log(animal_sleep$body_weight_kg),
xlab="Log of Lifespan in Years",
ylab="Log of Bodyweight in kg",
main="Log of Lifespan in Years vs. Log of Bodyweight in kg")
library("caret")
install.packages("caret")
library("caret")
instal.packages("ggplot2")
install.packages("ggplot2")
library("caret")
update.packages(checkBuilt = T)
library("caret")
install.packages("caret")
install.packages("caret", dependencies = T)
library("caret")
?caret
library("caret")
install.packages("caret", dependencies = T)
library("caret")
library("ggplot2")
install.packages("Rcpp")
library(caret)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
train.call = read.delim("train_call.txt")
train.clinical = read.delim("train_clinical.txt")
validation.call = read.delim("validation_call.txt")
# Merge data and classes
merged = merge(train.clinical, t(train.call[,-1:-4]), by.x="Sample", by.y="row.names")
val = t(validation.call[,-1:-4])
setwd("/Users/Harme/Dropbox/b4tm/CATS/")
train.call = read.delim("train_call.txt")
train.clinical = read.delim("train_clinical.txt")
validation.call = read.delim("validation_call.txt")
# Merge data and classes
merged = merge(train.clinical, t(train.call[,-1:-4]), by.x="Sample", by.y="row.names")
val = t(validation.call[,-1:-4])
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results$fit
results$fit$pred
results$fit$results
results$fit$trainingData
mfolds <- createFolds(merged[,3:2836],k=3)
mfolds[[1]]
length(mfolds[[1]])
length(mfolds[[2]])
length(mfolds[[3]])
merged[mfolds[[1]]]
length(results$fit$trainingData)
length(results$fit$pred)
length(results$fit$bestTune)
results$fit$pred
?varImp
set.seed(10)
subsets <- c(1:5, 10, 15, 20, 25)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = T)
lmProfile <- rfe(merged[,3:2836], merged$Subgroup,
sizes = subsets,
rfeControl = ctrl)
sum(subsets)
sum(1:5)
10+15+20+25+15
subsets <- c(1:2834)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = T)
lmProfile <- rfe(merged[,3:2836], merged$Subgroup,
sizes = subsets,
rfeControl = ctrl)
lmProfile <- rfe(merged[,3:2836], merged$Subgroup,
# sizes = subsets,
rfeControl = ctrl)
ctrl <- rfeControl(functions = nbFuncs,
method = "repeatedcv",
repeats = 5,
verbose = T)
lmProfile <- rfe(merged[,3:2836], merged$Subgroup,
# sizes = subsets,
rfeControl = ctrl)
lmProfile
lmProfile$variables
lmProfile$bestSubset
lmProfile$fit
lmProfile$results
nbFuncs
?rfeControl
rfeControl$functions
caretFuncs
?caretFuncs
subsets <- c(1:100)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = T)
lmProfile <- rfe(merged[,3:2836], merged$Subgroup,
sizes = subsets,
rfeControl = ctrl)
seq(1:100,10)
seq(1:100,by=10)
seq(1,100,10)
seq(0,100,10)
seq(10,100,10)
subsets <- seq(10,100,10)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = T)
lmProfile <- rfe(merged[,3:2836], merged$Subgroup,
sizes = subsets,
rfeControl = ctrl)
lmProfile
lmProfile$bestSubset
lmProfile$pred
lmProfile$variables
lmProfile$results
predictors(lmProfile)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results
results$fit
predictors(lmProfile)
merged[,predictors(lmProfile)]
preds <- predictors(lmProfile)
fitControl = trainControl(
method = "repeatedcv",
number = 3,
#            classProbs = TRUE,
repeats = 1)
fit = train(merged[,preds], merged$Subgroup,
method = "pam",
trControl = fitControl,
tuneLength = 10)
fit
length(preds)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
version
fit = train(merged[,preds], merged$Subgroup,
method = "pam",
trControl = fitControl,
tuneLength = 10)
performance = fit$results[row.names(fit$finalModel$tuneValue),]
results.train.accuracy[i] = performance$Accuracy
performance$Accuracy
predict.classes = predict(fit, newdata = validation.data)
predict.classes = predict(fit, newdata = merged[,3:90])
predict.classes = predict(fit, newdata = merged[,preds])
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results$AverageAccuracy
results$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results$fit
results$AverageAccuracy
preds
lmProfile
lmProfile$results
lmProfile$bestSubset
lmProfile$metric
lmProfile$optVariables
lmProfile$bestSubset
lmProfile$pred
lmProfile$fit
results$fit
results$fit$pred
results$fit$trainingData
results$fit$preProcess
results$fit$control
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "rf")
results$AverageAccuracy
results$fit
length(validation.call)
val
length(val)
length(validation.call)
View(val)
length(val)
ncol(val)
nrow(val)
predicted_val <- predict(results$fit,newdata = val)
predict(results$fit, newdata = val)
predict(results$fit, newdata = val[,preds])
results$fit$pred
results$fit$modelInfo
results$fit$trainingData
colnames(results$fit$trainingData)
predict(results$fit, newdata = val[,colnames(results$fit$trainingData[,-28])])
colnames(results$fit$trainingData[,-28])
colnames(results$fit$trainingData[-28])
colnames(results$fit$trainingData)
colnames(results$fit$trainingData[-length(results$fit$trainingData)])
used_features <- colnames(results$fit$trainingData[-length(results$fit$trainingData)])
used_features
predict(results$fit, newdata = val[,used_features])
val
used_features
colnames(val)
class(val)
val = as.data.frame(t(validation.call[,-1:-4]))
colnames((val))
val = as.data.frame(t(validation.call[,-1:-4]))
predict(results$fit, newdata = val[,used_features])
used_features <- colnames(results$fit$trainingData[-length(results$fit$trainingData)])
used_features
predict(results$fit, newdata = val[,used_features])
length(used_features)
val
View(val)
predicted_results <- predict(results$fit, newdata = val[,used_features])
val_predicted_results <- cbind(val, predicted_results)
View(val_predicted_results)
val
rownames(val)
c(rownames(val), predicted_results)
cbind(rownames(val), predicted_results)
predicted_results
cbind(rownames(val),predicted_results)
cbind(rownames(val),as.character(predicted_results)
)
cbind(rownames(val),as.character(predicted_results))
results$AverageAccuracy
?createFolds
used_features
createFolds(merged$Subgroup)
createFolds(merged$[,3:2836])
createFolds(merged[,3:2836])
createFolds(merged[,3:2836],k=3)
createFolds(merged$Subgroup)
createFolds(merged$Subgroup,k=3)
cbind(rownames(val),as.character(predicted_results))
results_df <- cbind(rownames(val),as.character(predicted_results))
colnames(results_df) <- c("Sample", "Subgroup")
results_df
write.table(results_df,file = "predictions_group_05.txt",sep = "\t",row.names = F)
results_df[,2]
sum(which(results_df[,2]=="HR+"))
which(results_df[,2]=="HR+")
length(which(results_df[,2]=="HR+"))
length(which(results_df[,2]=="HER2+"))
used_features
knowledge  <- c(2185, 877, 878, 879, 1842, 1578, 304, 1297, 1395, 360, 2201, 1647, 2636, 2368, 671, 2612,2613, 2433, 1415, 154, 2718, 2075, 1229, 1072, 774, 745, 760, 2554, 1646, 2202 2320, 238, 302)
knowledge  <- c(2185, 877, 878, 879, 1842, 1578, 304, 1297, 1395, 360, 2201, 1647, 2636, 2368, 671, 2612,2613, 2433, 1415, 154, 2718, 2075, 1229, 1072, 774, 745, 760, 2554, 1646, 2202, 2320, 238, 302)
for(i in knowledge){
paste("v",as.character(i))
}
for(i in knowledge){
print(paste("V",as.character(i)))
}
for(i in knowledge){
print(paste("V",str(i)))
}
for(i in knowledge){
print(paste("V",as.character(i),sep = ""))
}
for(i in knowledge){
knowledge.2 <- c(knowledge.2, paste("V",as.character(i),sep = ""))
}
knowledge.2 <- c()
for(i in knowledge){
knowledge.2 <- c(knowledge.2, paste("V",as.character(i),sep = ""))
}
knowledge.2
knowledge.2==used_features
used_features
used_features %IN% knowledge.2
used_features %in% knowledge.2
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "rf")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "rf")
results.knowledge$fit
results.knowledge$AverageAccuracy
results.knowledge$AverageAccuracy
results.knowledge$fit
used_features
knowledge.2
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$AverageAccuracy
results.knowledge$fit
results.knowledge$AverageAccuracy
results.knowledge$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results.knowledge$AverageAccuracy
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results.knowledge$fit$results
results.knowledge$TrainAverageAccuracy
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results$fit
results$AverageAccuracy
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results.knowledge$AverageAccuracy
results.knowledge$TrainAverageAccuracy
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results$fit$results$Accuracy
max(results$fit$results$Accuracy)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results$fit
results$fit
results$fit$results$Accuracy
results$fit
results$fit$finalModel
results$fit
results.knowledge$fit
results.knowledge$fit
results.knowledge$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results.knowledge$AverageAccuracy
results.knowledge$AverageAccuracy
results.knowledge$AverageAccuracy
results.knowledge$TrainAverageAccuracy
results.knowledge$TrainAverageAccuracy
results.knowledge$AverageAccuracy
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results.knowledge$AverageAccuracy
results.knowledge$TrainAverageAccuracy
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$TrainAverageAccuracy
results.knowledge$AverageAccuracy
results.knowledge$fit
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
results.knowledge = Validate(merged[,3:2836], merged$Subgroup, outer.fold = 3,inner.fold = 3,method = "pam")
results.knowledge$fit
merged[merged$Subgroup != 'HER2+']
her2_less <- merged[merged$Subgroup != 'HER2+']
View(her2_less)
her2_less <- merged[merged$Subgroup != 'HER2+',]
View(her2_less)
source('C:/Users/Harme/Dropbox/b4tm/CATS/Validation_function_Harmen_en_Ashvin_proberenwat.R')
source('C:/Users/Harme/Dropbox/b4tm/CATS/ashvin_en_harmen_proberen_wat.R')
